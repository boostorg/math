# Copyright Daryle Walker, Hubert Holin, John Maddock 2006 - 2007
# copyright Paul A. Bristow 2006 - 2010
# Distributed under the Boost Software License, Version 1.0.
# (See accompanying file LICENSE_1_0.txt or copy at
# http://www.boost.org/LICENSE_1_0.txt.
# \math_toolkit\libs\math\test\jamfile.v2
# Runs all math toolkit tests, functions & distributions,
# and build math examples.

# bring in the rules for testing
import testing ;
import modules ;
import path ;
import pch ;
import-search /boost/config/checks ;
import config : requires ;

local ntl-path = [ modules.peek : NTL_PATH ] ;
local gmp_path = [ modules.peek : GMP_PATH ] ;
local e_float_path = [ modules.peek : E_FLOAT_PATH ] ;

#
# PCH support is broken when --remove-test-targets is specified on the command
# line.  Disable it until someone fixes this.
#
local remove-test-targets = [ MATCH (--remove-test-targets) : [ modules.peek : ARGV ] ] ;

if $(remove-test-targets)
{
   OBJ_REMOVAL_OPTIONS = <pch>off ;
}

obj no_eh : noeh_support.cpp : <library>/boost/config//boost_config ;


project
    : requirements
      $(OBJ_REMOVAL_OPTIONS)
      <toolset>acc:<cxxflags>+W2068,2461,2236,4070,4069
      <toolset>intel-win:<cxxflags>-nologo
      <toolset>intel-win:<linkflags>-nologo
      #<toolset>intel-linux:<pch>off
      <toolset>intel-darwin:<pch>off
      <toolset>msvc:<warnings>all
      <toolset>msvc:<asynch-exceptions>on
      <toolset>msvc:<cxxflags>/wd4996
      <toolset>msvc:<cxxflags>/wd4511 # copy constructor could not be generated
      <toolset>msvc:<cxxflags>/wd4512
      <toolset>msvc:<cxxflags>/wd4610
      <toolset>msvc:<cxxflags>/wd4510
      <toolset>msvc:<cxxflags>/wd4127
      <toolset>msvc:<cxxflags>/wd4459
      <toolset>msvc:<cxxflags>/wd4701 # needed for lexical cast - temporary.
      <toolset>msvc:<cxxflags>/wd4189 # local variable is initialized but not referenced
      <toolset>msvc-7.1:<source>../vc71_fix//vc_fix
      <toolset>msvc-7.1:<pch>off
      <toolset>clang-6.0.0:<pch>off  # added to see effect.
      <toolset>clang:<cxxflags>-Wno-literal-range  # warning: magnitude of floating-point constant too small for type 'long double' [-Wliteral-range]
      <toolset>gcc,<target-os>windows:<pch>off
      <toolset>borland:<runtime-link>static
      # <toolset>msvc:<cxxflags>/wd4506 has no effect?
      # suppress xstring(237) : warning C4506: no definition for inline function
      <exception-handling>off:<source>no_eh
      <link>shared:<define>BOOST_REGEX_DYN_LINK=1
      # For simplicities sake, make everything a static lib:
      <link>static
      <define>BOOST_ALL_NO_LIB=1
      <define>BOOST_UBLAS_UNSUPPORTED_COMPILER=0
      <include>.
      <include>../include_private
      <include>$(ntl-path)/include
      <include>$(e_float_path)
      <include>$(gmp_path) <include>$(gmp_path)/mpfr <include>$(gmp_path)/gmpfrxx <include>$(gmp_path)/mpfrc++
      <search>$(gmp_path)
      <search>$(mpfr_path)
      <search>$(mpfr_path)/build.vc10/lib/Win32/Debug
      [ requires cxx11_noexcept cxx11_rvalue_references sfinae_expr cxx11_auto_declarations cxx11_lambdas cxx11_unified_initialization_syntax cxx11_hdr_tuple cxx11_hdr_initializer_list cxx11_hdr_chrono cxx11_thread_local cxx11_constexpr cxx11_nullptr cxx11_numeric_limits cxx11_decltype cxx11_hdr_array cxx11_hdr_atomic cxx11_hdr_type_traits cxx11_allocator cxx11_explicit_conversion_operators ]
      [ requires cxx14_decltype_auto cxx14_generic_lambdas cxx14_return_type_deduction cxx14_variable_templates cxx14_decltype_auto cxx14_generic_lambdas cxx14_return_type_deduction ]
    ;

if $(ntl-path)
{
   lib ntl : [ GLOB $(ntl-path)/src : *.cpp ] ;
}
else
{
   searched-lib ntl ;
}

explicit ntl ;

cpp-pch pch : pch.hpp : <use>/boost/test//boost_unit_test_framework ;
cpp-pch pch_light : pch_light.hpp : <use>/boost/test//boost_unit_test_framework ;
lib compile_test_main : compile_test/main.cpp ;

searched-lib quadmath ;

local float128_type_intel_quad =
    [ check-target-builds ../config//has_intel_quad "Intel _Quad datatype support"
        : <cxxflags>-Qoption,cpp,--extended_float_type <define>BOOST_MATH_USE_FLOAT128 ] ;
local float128_type_gcc =
    [ check-target-builds ../config//has_float128 "GCC libquadmath and __float128 support"
        : <toolset>gcc:<library>quadmath <toolset>gcc:<define>BOOST_MATH_TEST_FLOAT128 ] ;
local float128_type_floatmax = $(float128_type_gcc) $(float128_type_intel_quad)
    [ check-target-builds ../config//has_128bit_floatmax_t "128-bit floatmax_t" : : <build>no ] ;
#
# DO NOT include $(float128_type_floatmax) in this macro, otherwise the whole test
# gets disabled when std::float128_t is not available (which is most of the time!!)
#
local float128_type =
    $(float128_type_intel_quad) $(float128_type_gcc) ;

test-suite special_fun :
   [ run git_issue_1249.cpp /boost/test//boost_unit_test_framework  ]
;

# Some aliases which group blocks of tests for CI testing:

alias github_ci_block_1 : special_fun  ;
explicit github_ci_block_1 ;
