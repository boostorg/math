
import testing ;
import cu ;
import modules ;

cuda = [ modules.peek : CUDA_PATH ] ;

searched-lib cuda : : <name>cuda <search>$(cuda)/lib/x64 ;
searched-lib cudart : : <name>cudart <search>$(cuda)/lib/x64 ;

exe verify_cuda : cuda_check.cu cuda cudart ../../../chrono/build//boost_chrono ../../../system/build//boost_system : <define>BOOST_ALL_NO_LIB release <address-model>64 <toolset>msvc:<runtime-link>static ;
explicit verify_cuda ;

for local source in [ glob test*.cu ]
{
   run $(source) cuda cudart ../../../chrono/build//boost_chrono ../../../system/build//boost_system : : : release <define>BOOST_ALL_NO_LIB <address-model>64 <toolset>msvc:<runtime-link>static [ check-target-builds .//verify_cuda "CUDA compiler support" : : <build>no ] ;
}

run misc/test_naive_monte_carlo.cu misc/test_naive_monte_carlo_host.cpp cuda cudart ../../../chrono/build//boost_chrono ../../../system/build//boost_system : : : release <define>BOOST_ALL_NO_LIB <address-model>64 <toolset>msvc:<runtime-link>static [ check-target-builds .//verify_cuda "CUDA compiler support" : : <build>no ] ;
