// Copyright Nick Thompson 2017.
// Use, modification and distribution are subject to the
// Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt
// or copy at http://www.boost.org/LICENSE_1_0.txt)

#include <vector>

namespace boost { namespace math { namespace quadrature { namespace detail {

// These nodes and weights can be verified at:
// https://www.advanpix.com/2011/11/07/gauss-kronrod-quadrature-nodes-weights/
template<class Real, class F>
Real g7_k15(const F& f, Real* error = nullptr)
{
    static const std::vector<Real> gauss_nodes{
        boost::lexical_cast<Real>("0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"),
        boost::lexical_cast<Real>("0.4058451513773971669066064120769614633473820140993701263870432517946638132261256553283126897277465878"),
        boost::lexical_cast<Real>("0.7415311855993944398638647732807884070741476471413902601199553519674298746721805137928268323668632471"),
        boost::lexical_cast<Real>("0.9491079123427585245261896840478512624007709376706177835487691039130633303548401408057307700279257241")
    };

    static const std::vector<Real> gauss_weights {
        boost::lexical_cast<Real>("0.4179591836734693877551020408163265306122448979591836734693877551020408163265306122448979591836734694"),
        boost::lexical_cast<Real>("0.3818300505051189449503697754889751338783650835338627347510834510307055464341297083486846593440448015"),
        boost::lexical_cast<Real>("0.2797053914892766679014677714237795824869250652265987645370140326936188104305626768132409429011976188"),
        boost::lexical_cast<Real>("0.1294849661688696932706114326790820183285874022599466639772086387246552349720423087156254181629208451")
    };

    static const std::vector<Real> gauss_kronrod_weights {
        boost::lexical_cast<Real>("0.2094821410847278280129991748917142636977620802237043167129980065613751513232564861681690821167594910"),
        boost::lexical_cast<Real>("0.1903505780647854099132564024210136828260780754553583558854408803674405807241021267960596460510637759"),
        boost::lexical_cast<Real>("0.1406532597155259187451895905102379203998897572479985755617454689331270809309095040809737912241555591"),
        boost::lexical_cast<Real>("0.0630920926299785532907006631892042866650711572115507071136055451469839974779648749281991702645044420"),
    };

    static const std::vector<Real> kronrod_nodes {
        boost::lexical_cast<Real>("0.2077849550078984676006894037732449134797844071451706497138457346198669384494352022691034322718369853"),
        boost::lexical_cast<Real>("0.5860872354676911302941448382587295984367807506043609513049928931988037360744440746451167449893594210"),
        boost::lexical_cast<Real>("0.8648644233597690727897127886409262012109723070740881486014577127670677081325957210358584785960459054"),
        boost::lexical_cast<Real>("0.9914553711208126392068546975263285166420443383703347012910874135724417393465340723592450350962684176")
    };

    static const std::vector<Real> kronrod_weights {
        boost::lexical_cast<Real>("0.2044329400752988924141619992346490847165176041807183574244709531204546769854659887934837429200934755"),
        boost::lexical_cast<Real>("0.1690047266392679028265834265985502841062449003029442414973400675569568092161902911293670240385535991"),
        boost::lexical_cast<Real>("0.1047900103222501838398763225415180174437566542138306118933906513396374632157628952416757162750931133"),
        boost::lexical_cast<Real>("0.0229353220105292249637320080589695919935608112757469922675074302547118157879760759461563681681562895"),
    };

    Real f0 = f(0);
    Real I0 = f0*gauss_weights[0];
    Real I1 = f0*gauss_kronrod_weights[0];
    for (size_t i = 1; i < gauss_nodes.size(); ++i) {
        Real yp = f(gauss_nodes[i]);
        Real ym = f(-gauss_nodes[i]);
        I0 += gauss_weights[i]*(yp + ym);
        I1 += gauss_kronrod_weights[i]*(yp + ym);
    }

    for(size_t i = 0; i < kronrod_weights.size(); ++i) {
        I1 += kronrod_weights[i]*(f(kronrod_nodes[i]) + f(-kronrod_nodes[i]));
    }

    if (error) {
        using std::abs;
        *error = abs(I1 - I0);
    }
    return I1;
}


template<class Real, class F>
Real g10_k21(const F& f, Real* error = nullptr)
{

    static const std::vector<Real> gauss_nodes {
        boost::lexical_cast<Real>("0.1488743389816312108848260011297199846175648594206916957079892535159036173556685213711776297994636912"),
        boost::lexical_cast<Real>("0.4333953941292471907992659431657841622000718376562464965027015131437669890777035012251027579501177212"),
        boost::lexical_cast<Real>("0.6794095682990244062343273651148735757692947118348094676648171889525585753950749246150785735704803795"),
        boost::lexical_cast<Real>("0.8650633666889845107320966884234930485275430149653304525219597318453747551380555613567907289460457707"),
        boost::lexical_cast<Real>("0.9739065285171717200779640120844520534282699466923821192312120666965952032346361596257235649562685563"),
    };

    static const std::vector<Real> gauss_weights {
        boost::lexical_cast<Real>("0.2955242247147528701738929946513383294210467170268536013543080297559959382171523292703565957937542167"),
        boost::lexical_cast<Real>("0.2692667193099963550912269215694693528597599384608837958005632762421534323191792767642266367092527608"),
        boost::lexical_cast<Real>("0.2190863625159820439955349342281631924587718705226770898809565436351999106529512812426839931772021928"),
        boost::lexical_cast<Real>("0.1494513491505805931457763396576973324025566396694273678354772687532386547266300109459472646347319519"),
        boost::lexical_cast<Real>("0.0666713443086881375935688098933317928578648343201581451286948816134120640840871017767855096850588778"),
    };

    static const std::vector<Real> gauss_kronrod_weights {
        boost::lexical_cast<Real>("0.1477391049013384913748415159720680455237316254852066045181919543988599301673569640573270395918288225"),
        boost::lexical_cast<Real>("0.1347092173114733259280540017717068327609919130085597140663666849132029140012128203667695315948827177"),
        boost::lexical_cast<Real>("0.1093871588022976418992105903258049602718132998343452200781967582982655037289143216868389943267455384"),
        boost::lexical_cast<Real>("0.0750396748109199527670431409161900093952193820009100881736970480484304043428584951788138087306465541"),
        boost::lexical_cast<Real>("0.0325581623079647274788189724593897606173889398456626095715375042327141218201654986923816076053846265"),
    };

    static const std::vector<Real> kronrod_nodes {
        boost::lexical_cast<Real>("0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"),
        boost::lexical_cast<Real>("0.2943928627014601981311266031038655661626866251569579186488822917272461116633273788844552317826823736"),
        boost::lexical_cast<Real>("0.5627571346686046833390000992726941408430138819419669588603462145877926635321632754971208785416999242"),
        boost::lexical_cast<Real>("0.7808177265864168970637175783450423771634075202981571797469485999950560798276142065452697723423899624"),
        boost::lexical_cast<Real>("0.9301574913557082260012071800595083462251679099819392423034940686682841598309167305501119457285100788"),
        boost::lexical_cast<Real>("0.9956571630258080807355272806890028479212605872194789243633791611175702304677486735715232599691207672"),
    };

    static const std::vector<Real> kronrod_weights {
        boost::lexical_cast<Real>("0.1494455540029169056649364683898212037452363166874728038356085187369896447851184192572103070568954026"),
        boost::lexical_cast<Real>("0.1427759385770600807970942731387170608859790565319055556074100474397077044990934002781113170628375643"),
        boost::lexical_cast<Real>("0.1234919762620658510779581098310741595123003495286483276446799412097405423897545468968153862236373823"),
        boost::lexical_cast<Real>("0.0931254545836976055350654650833663443900188288807600319700850387601777356722007752374141230616158275"),
        boost::lexical_cast<Real>("0.0547558965743519960313813002445801763737211140583335575244326158047840989278189753251163015690032981"),
        boost::lexical_cast<Real>("0.0116946388673718742780643960621920483962173324819318889275981475256222220580649926518067367049699673"),
    };

    Real I0 = 0;
    Real I1 = 0;
    for (size_t i = 0; i < gauss_nodes.size(); ++i) {
        Real yp = f(gauss_nodes[i]);
        Real ym = f(-gauss_nodes[i]);
        I0 += gauss_weights[i]*(yp + ym);
        I1 += gauss_kronrod_weights[i]*(yp + ym);
    }

    I1 += f(0)*kronrod_weights[0];
    for(size_t i = 1; i < kronrod_weights.size(); ++i) {
        I1 += kronrod_weights[i]*(f(kronrod_nodes[i]) + f(-kronrod_nodes[i]));
    }

    if (error) {
        using std::abs;
        *error = abs(I1 - I0);
    }
    return I1;
}



}}}}
