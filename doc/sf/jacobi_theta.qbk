[/
Copyright (c) 2020 Evan Miller
Use, modification and distribution are subject to the
Boost Software License, Version 1.0. (See accompanying file
LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
]

[section:jacobi_theta Jacobi Theta Functions]

[section:jacobi_theta_overview Overview of the Jacobi Theta Functions]

The Jacobi Theta functions are a set of four inter-related periodic functions of /x/ which are expressed in terms of a parameter /q/ (also called the nome), or a closely related value, [tau]
[footnote [@https://en.wikipedia.org/wiki/Theta_function Wikipedia: Theta function]]
[footnote [@https://mathworld.wolfram.com/JacobiThetaFunctions.html Weisstein, Eric W. "Jacobi Theta Functions." From MathWorld - A Wolfram Web Resource.]]
[footnote [@https://dlmf.nist.gov/20 Digital Library of Mathematical Functions: Theta Functions, Reinhardt, W. P.,  Walker, P. L.]].

Mathematically, the functions are described by:

[equation jacobi_theta1]
[equation jacobi_theta2]
[equation jacobi_theta3]
[equation jacobi_theta4]

Graphically, setting /q/=0.15:

[graph jacobi_theta]

Appropriately multiplied and divided, these four theta functions can be used
to implement the [link math_toolkit.jacobi.jac_over Jacobi elliptic functions]; but this is not really
recommended, as the existing Boost implementations are likely faster and
more accurate.

Most applications will want to use the /q/ parameterization of the functions: `__jacobi_theta1`, `__jacobi_theta2`, `__jacobi_theta3`, and `__jacobi_theta4`, where /q/ is restricted to the domain (0, 1). However, a second [tau] parameterization is provided for all four functions, where

[equation jacobi_theta_nome]

Note that Boost assumes that [tau] is a purely imaginary number. This assumption is not required by the mathematics, but it does cover the most common application domains.

[heading Accuracy considerations]

The purpose of the [tau] parameterization is to provide increased accuracy either when /q/ is expressible as an exponential or is very close to unity. For example, instead of:

  jacobi_theta1(x, exp(-a));

A more accurate computation will take advantage of [tau]:

  jacobi_theta1tau(x, a / boost::math::constants::pi<T>());

Internally, Boost implements the /q/ parameterization by taking the logarithm of /q/ and passing it to the [tau] parameterization; as such, using the [tau] parameterization directly will generally yield greater precision. As another example, if the complement of /q/ is known with great accuracy, then instead of:

  jacobi_theta1(x, 1-q_complement);

It is more accurate to use `__log1p` and pass in the result to the [tau] version:

  jacobi_theta1tau(x, -boost::math::log1p(-q_complement) / boost::math::constants::pi<T>());

Additional "minus 1" versions of the third and fourth theta functions are provided. Similar in spirit to `__expm1`, these functions return one less than the evaluated function, and yield increased accuracy when /q/ is small.

[heading Tests]

Results of the theta functions are tested against Wolfram Alpha data, as well as random values computed at high precision. In addition, the tests verify the majority of the identities described in [@https://dlmf.nist.gov/20.7 DLMF Chapter 20.7].

[endsect] [/section:jacobi_theta_overview Overview of the Jacobi Theta Functions]

[section:jacobi_theta1 Jacobi Theta Function [theta][sub 1]]

[heading Synopsis]

``
  #include <boost/math/special_functions/jacobi_theta.hpp>
``

  namespace boost { namespace math {
      template <class T>
      ``__sf_result`` jacobi_theta1(T x, T q);

      template <class T, class Policy>
      ``__sf_result`` jacobi_theta1(T x, T q, const Policy&);

      template <class T>
      ``__sf_result`` jacobi_theta1tau(T x, T tau);

      template <class T, class Policy>
      ``__sf_result`` jacobi_theta1tau(T x, T tau, const Policy&);
  }} // namespaces

[heading Description]

The functions calculate the value of first [link math_toolkit.jacobi_theta.jacobi_theta_overview Jacobi Theta function], parameterized either in terms of the nome /q/:

[equation jacobi_theta1]

Or in terms of an imaginary [tau]:

[equation jacobi_theta1tau]

The nome /q/ is restricted to the domain (0, 1). The following graph shows the theta function at various values of /q/:

[graph jacobi_theta1]

[optional_policy]

[heading Implementation]

The /q/ parameterization is implemented using the [tau] parameterization, where [tau]=-log(/q/)/[pi].

If [tau] is greater than or equal to 1, the summation in the section above is used as-is. However if [tau] < 1, the following identity [@https://dlmf.nist.gov/20.7#viii DLMF 20.7.30] is used, defining [tau]'=-1/[tau]:

[equation jacobi_theta1_imaginary]

This transformation of variables ensures that the function will always converge in a small number of iterations.

[endsect] [/section:jacobi_theta1 Jacobi Theta Function [theta][sub 1]]

[section:jacobi_theta2 Jacobi Theta Function [theta][sub 2]]

[heading Synopsis]

``
  #include <boost/math/special_functions/jacobi_theta.hpp>
``

  namespace boost { namespace math {
      template <class T>
      ``__sf_result`` jacobi_theta2(T x, T q);

      template <class T, class Policy>
      ``__sf_result`` jacobi_theta2(T x, T q, const Policy&);

      template <class T>
      ``__sf_result`` jacobi_theta2tau(T x, T tau);

      template <class T, class Policy>
      ``__sf_result`` jacobi_theta2tau(T x, T tau, const Policy&);
  }} // namespaces

[heading Description]

The functions calculate the value of second [link math_toolkit.jacobi_theta.jacobi_theta_overview Jacobi Theta function], parameterized either in terms of the nome /q/:

[equation jacobi_theta2]

Or in terms of an imaginary [tau]:

[equation jacobi_theta2tau]

The nome /q/ is restricted to the domain (0, 1). The following graph shows the theta function at various values of /q/:

[graph jacobi_theta2]

[optional_policy]

[heading Implementation]

The /q/ parameterization is implemented using the [tau] parameterization, where [tau]=-log(/q/)/[pi].

If [tau] is greater than or equal to 1, the summation in the section above is used as-is. However if [tau] < 1, the following identity [@https://dlmf.nist.gov/20.7#viii DLMF 20.7.31] is used, defining [tau]'=-1/[tau]:

[equation jacobi_theta2_imaginary]

This transformation of variables ensures that the function will always converge in a small number of iterations.

[endsect] [/section:jacobi_theta2 Jacobi Theta Function [theta][sub 2]]

[section:jacobi_theta3 Jacobi Theta Function [theta][sub 3]]

[heading Synopsis]

``
  #include <boost/math/special_functions/jacobi_theta.hpp>
``

  namespace boost { namespace math {
      template <class T>
      ``__sf_result`` jacobi_theta3(T x, T q);

      template <class T, class Policy>
      ``__sf_result`` jacobi_theta3(T x, T q, const Policy&);

      template <class T>
      ``__sf_result`` jacobi_theta3tau(T x, T tau);

      template <class T, class Policy>
      ``__sf_result`` jacobi_theta3tau(T x, T tau, const Policy&);

      template <class T>
      ``__sf_result`` jacobi_theta3m1(T x, T q);

      template <class T, class Policy>
      ``__sf_result`` jacobi_theta3m1(T x, T q, const Policy&);

      template <class T>
      ``__sf_result`` jacobi_theta3m1tau(T x, T tau);

      template <class T, class Policy>
      ``__sf_result`` jacobi_theta3m1tau(T x, T tau, const Policy&);
  }} // namespaces

[heading Description]

The functions calculate the value of third [link math_toolkit.jacobi_theta.jacobi_theta_overview Jacobi Theta function], parameterized either in terms of the nome /q/:

[equation jacobi_theta3]

Or in terms of an imaginary [tau]:

[equation jacobi_theta3tau]

The nome /q/ is restricted to the domain (0, 1). The following graph shows the theta function at various values of /q/:

[graph jacobi_theta3]

[optional_policy]

A second quartet of functions (functions containing `m1`) compute one less than the value of the third theta function. These versions of the functions provide increased accuracy when the result is close to unity.

[heading Implementation]

The /q/ parameterization is implemented using the [tau] parameterization, where [tau]=-log(/q/)/[pi].

If [tau] is greater than or equal to 1, the summation in the section above is used as-is. However if [tau] < 1, the following identity [@https://dlmf.nist.gov/20.7#viii DLMF 20.7.32] is used, defining [tau]'=-1/[tau]:

[equation jacobi_theta3_imaginary]

This transformation of variables ensures that the function will always converge in a small number of iterations.

[endsect] [/section:jacobi_theta3 Jacobi Theta Function [theta][sub 3]]

[section:jacobi_theta4 Jacobi Theta Function [theta][sub 4]]

[heading Synopsis]

``
  #include <boost/math/special_functions/jacobi_theta.hpp>
``

  namespace boost { namespace math {
      template <class T>
      ``__sf_result`` jacobi_theta4(T x, T q);

      template <class T, class Policy>
      ``__sf_result`` jacobi_theta4(T x, T q, const Policy&);

      template <class T>
      ``__sf_result`` jacobi_theta4tau(T x, T tau);

      template <class T, class Policy>
      ``__sf_result`` jacobi_theta4tau(T x, T tau, const Policy&);

      template <class T>
      ``__sf_result`` jacobi_theta4m1(T x, T q);

      template <class T, class Policy>
      ``__sf_result`` jacobi_theta4m1(T x, T q, const Policy&);

      template <class T>
      ``__sf_result`` jacobi_theta4m1tau(T x, T tau);

      template <class T, class Policy>
      ``__sf_result`` jacobi_theta4m1tau(T x, T tau, const Policy&);
  }} // namespaces

[heading Description]

The functions calculate the value of fourth [link math_toolkit.jacobi_theta.jacobi_theta_overview Jacobi Theta function], parameterized either in terms of the nome /q/:

[equation jacobi_theta4]

Or in terms of an imaginary [tau]:

[equation jacobi_theta4tau]

The nome /q/ is restricted to the domain (0, 1). The following graph shows the theta function at various values of /q/:

[graph jacobi_theta4]

[optional_policy]

A second quartet of functions (functions containing `m1`) compute one less than the value of the fourth theta function. These versions of the functions provide increased accuracy when the result is close to unity.

[heading Implementation]

The /q/ parameterization is implemented using the [tau] parameterization, where [tau]=-log(/q/)/[pi].

If [tau] is greater than or equal to 1, the summation in the section above is used as-is. However if [tau] < 1, the following identity [@https://dlmf.nist.gov/20.7#viii DLMF 20.7.33] is used, defining [tau]'=-1/[tau]:

[equation jacobi_theta4_imaginary]

This transformation of variables ensures that the function will always converge in a small number of iterations.

[endsect] [/section:jacobi_theta4 Jacobi Theta Function [theta][sub 4]]

[endsect] [/section:jacobi_theta Jacobi Theta Functions]
