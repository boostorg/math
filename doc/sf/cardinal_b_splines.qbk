[/
  Copyright 2019, Nick Thompson
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]

[section:b_spline Cardinal B-splines]

[h4 Synopsis]

``
#include <boost/math/special_functions/cardinal_b_spline.hpp>
``

   namespace boost{ namespace math{

   template<class Real>
   Real cardinal_b_spline(unsigned n, Real x);

   template<class Real>
   Real cardinal_b_spline_prime(unsigned n, Real x);

   template<class Real>
   Real cardinal_b_spline_double_prime(unsigned n, Real x);

   template<class Real>
   Real forward_cardinal_b_spline(unsigned n, Real x);

   }} // namespaces

Cardinal /B/-splines are a family of compactly supported functions useful for the smooth interpolation of tables.

The first /B/-spline /B/[sub 0] is simply a box function:
It takes the value one inside the interval \[-1/2, 1/2\], and is zero elsewhere.
/B/-splines of higher smoothness are constructed by iterative convolution, namely, /B/[sub 1] := /B/[sub 0] \u2217 /B/[sub 0],
and /B/[sub /n/+1] := /B/[sub /n/ ] \u2217 /B/[sub 0].
For example, /B/[sub 1](/x/) = 1 - |/x/| for /x/ in \[-1,1\], and zero elsewhere, so it is a hat function.

A basic usage is as follows:

    using boost::math::cardinal_b_spline;
    double x = 0.5;
    // B₀(x), the box function:
    double y = cardinal_b_spline(0, x);
    // B₁(x), the hat function:
    y = cardinal_b_spline(1, x);

    // The derivative of B₁(x):
    double y_p = cardinal_b_spline_prime(1,x);
    // The second derivative of B₃:
    double y_pp = cardinal_b_spline_double_prime(3, x);

[$../graphs/central_b_splines.svg]
[$../graphs/central_b_spline_derivatives.svg]

[h3 Caveats]

Numerous notational conventions for /B/-splines exist.
Whereas Boost.Math (following Kress) zero indexes the /B/-splines,
other authors (such as Schoenberg and Massopust) use 1-based indexing.
So (for example) Boost.Math's hat function /B/[sub 1] is what Schoenberg calls /M/[sub 2].
Mathematica, like Boost, uses the zero-indexing convention for its `BSplineCurve`.

Even the support of the splines is not agreed upon.
Mathematica starts the support of the splines at zero and rescales the independent variable so that the support of every member is \[0, 1\].
Massopust as well as Unser puts the support of the /B/-splines at \[0, /n/\], whereas Kress centers them at zero.
Schoenberg distinguishes between the two cases, called the splines starting at zero forward splines, and the ones symmetric about zero /central/.

The /B/-splines of Boost.Math are central, with support support \[-(/n/+1)\/2, (/n/+1)\/2\].
If necessary, the forward splines can be evaluated by using `forward_cardinal_b_spline`, whose support is \[0, /n/+1\].

[h3 Implementation]

The implementation uses recursion for /n/ less than 8 and a summation for larger /n/.
Double precision timing on a consumer x86 laptop is shown below:

``
Run on (4 X 2700 MHz CPU s)
CPU Caches:
  L1 Data 32K (x2)
  L1 Instruction 32K (x2)
  L2 Unified 262K (x2)
  L3 Unified 3145K (x1)
Load Average: 1.70, 1.74, 1.59
-----------------------------------------
Benchmark                            Time
-----------------------------------------
CardinalBSplines<double>/0        17.9 ns
CardinalBSplines<double>/1        20.0 ns
CardinalBSplines<double>/2        22.7 ns
CardinalBSplines<double>/3        28.4 ns
CardinalBSplines<double>/4        37.0 ns
CardinalBSplines<double>/5        54.4 ns
CardinalBSplines<double>/6        74.7 ns
CardinalBSplines<double>/7        91.0 ns
CardinalBSplines<double>/8         109 ns
CardinalBSplines<double>/9         129 ns
CardinalBSplines<double>/10        150 ns
CardinalBSplines<double>/11        173 ns
CardinalBSplines<double>/12        196 ns
CardinalBSplines<double>/13        223 ns
CardinalBSplines<double>/14        252 ns
CardinalBSplines<double>/15        281 ns
CardinalBSplines<double>/16        316 ns
CardinalBSplines<double>/17        347 ns
CardinalBSplines<double>/18        382 ns
CardinalBSplines<double>/19        429 ns
CardinalBSplines<double>/20        442 ns
``

[h3 References]

* I.J. Schoenberg, ['Cardinal Spline Interpolation], SIAM Volume 12, 1973
* Rainer Kress, ['Numerical Analysis], Springer, 1998
* Peter Massopust, ['On Some Generalizations of B-splines], arxiv preprint, 2019
* Michael Unser and Thierry Blu, ['Fractional Splines and Wavelets], SIAM Review, Volume 42, No. 1

[endsect]
